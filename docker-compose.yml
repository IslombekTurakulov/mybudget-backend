version: '3.9'

secrets:
  pg_password:
    file: ./secrets/pg_password.txt
  app_secret:
    file: ./secrets/app_jwt_secret.txt

networks:
  backend:
    driver: bridge
  public:
    driver: bridge

volumes:
  pg_data:
  letsencrypt:

services:
  database:
    image: postgres:17-alpine
    networks:
      - backend
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
    secrets:
      - pg_password
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  backend:
    image: ghcr.io/islombekturakulov/mybudget-backend:latest
    networks:
      - backend
      - public
    environment:
      - DATABASE_URL=jdbc:postgresql://database:5432/${PG_DATABASE}
      - PG_USER=${PG_USER}
      - PG_DATABASE=${PG_DATABASE}
      - PG_PASSWORD_FILE=/run/secrets/pg_password
      - JWT_SECRET_FILE=/run/secrets/app_secret
    secrets:
      - pg_password
      - app_secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.entrypoints=web"
        - "traefik.http.services.backend.loadbalancer.server.port=8080"

  traefik:
    image: traefik:v2.11
    networks:
      - public
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    deploy:
      placement:
        constraints:
          - node.role == manager

