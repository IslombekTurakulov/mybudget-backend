name: Backend CI/CD

on:
  push:
    branches: [main]            # собираем при пушах в main
  workflow_dispatch:            # и вручную

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PG_DATABASE }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U ${{ secrets.PG_USER }} -d ${{ secrets.PG_DATABASE }} -p 5432"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATA_SOURCE_CLASS_NAME: org.postgresql.ds.PGSimpleDataSource
      DATA_SOURCE_USER: ${{ secrets.PG_USER }}
      DATA_SOURCE_PASSWORD: ${{ secrets.PG_PASSWORD }}
      DATA_SOURCE_DATABASE: ${{ secrets.PG_DATABASE }}
      DATA_SOURCE_SERVER: ${{ secrets.PG_HOST }}
      DATA_SOURCE_PORT: ${{ secrets.PG_PORT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # 3. Cache Gradle dependencies for faster builds
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # 4. Build & run tests
      - name: Build & test
        run: ./gradlew clean build --no-daemon

      # 5. Static analysis with Detekt
      - name: Run Detekt
        run: ./gradlew detekt

      # 6. Security scanning with CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: kotlin
      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v2

  docker-publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # 1. Checkout repository again
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Build Docker image
      - name: Build Docker image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/mybudget-backend:${{ github.sha }} \
            .

      # 3. Authenticate to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Push Docker image
      - name: Push image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/mybudget-backend:${{ github.sha }}

  deploy:
    needs: docker-publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Install Yandex Cloud CLI
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          source ~/.bashrc

      # Deploy the new version to Yandex Cloud Functions
      - name: Deploy to Yandex Cloud Functions
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
        run: |
          yc serverless function version create \
            --function-name mybudget-backend \
            --runtime kotlin17 \
            --memory 256m \
            --entry-point io.iuturakulov.ApplicationKt \
            --source-path .
