name: Backend CI/CD

on:
  push:
    branches: [main]            # собираем при пушах в main
  workflow_dispatch:            # и вручную

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PG_USER:       ${{ secrets.PG_USER }}
      PG_PASSWORD:   ${{ secrets.PG_PASSWORD }}
      PG_DATABASE:   ${{ secrets.PG_DATABASE }}
      PG_PORT:       ${{ secrets.PG_PORT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull Postgres image
        run: docker pull postgres:17

      - name: Start Postgres container
        run: |
          docker run -d --name pg \
            -e POSTGRES_USER="$PG_USER" \
            -e POSTGRES_PASSWORD="$PG_PASSWORD" \
            -e POSTGRES_DB="$PG_DATABASE" \
            -p "$PG_PORT:5432" \
            postgres:17

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p "$PG_PORT" -U "$PG_USER" && exit 0
            sleep 1
          done
          echo "Postgres did not start in time" >&2
          exit 1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build & test
        run: ./gradlew clean build --no-daemon

       # - name: Run Detekt
        #  run: ./gradlew detekt
        
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v2
      #   with:
      #     languages: kotlin
      # - name: Run CodeQL analysis
      #   uses: github/codeql-action/analyze@v2

  docker-publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/mybudget-backend:${{ github.sha }} \
            .

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/mybudget-backend:${{ github.sha }}

  deploy:
    needs: docker-publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Install Yandex Cloud CLI
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          source ~/.bashrc

      # Deploy the new version to Yandex Cloud Functions
      - name: Deploy to Yandex Cloud Functions
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
        run: |
          yc serverless function version create \
            --function-name mybudget-backend \
            --runtime kotlin17 \
            --memory 256m \
            --entry-point io.iuturakulov.ApplicationKt \
            --source-path .
