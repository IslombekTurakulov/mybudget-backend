name: Quick Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.SERVER_HOST }}" ]; then
            echo "Error: Required secret SERVER_HOST is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SERVER_USER }}" ]; then
            echo "Error: Required secret SERVER_USER is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "Error: Required secret SERVER_SSH_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PG_USER }}" ]; then
            echo "Error: Required secret PG_USER is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PG_PASSWORD }}" ]; then
            echo "Error: Required secret PG_PASSWORD is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PG_DATABASE }}" ]; then
            echo "Error: Required secret PG_DATABASE is not set"
            exit 1
          fi
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "Error: Required secret JWT_SECRET is not set"
            exit 1
          fi
          echo "All required secrets are set"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            #!/bin/bash
            set -e

            # Check required tools
            command -v docker >/dev/null 2>&1 || { echo "Docker is not installed!"; exit 1; }
            command -v docker-compose >/dev/null 2>&1 || { echo "docker-compose is not installed!"; exit 1; }

            # Setup environment
            sudo mkdir -p /opt/mybudget/backend
            sudo chown -R $USER:$USER /opt/mybudget/backend
            cd /opt/mybudget/backend

            # Initialize Docker Swarm if needed
            if ! docker info | grep -q "Swarm: active"; then
              docker swarm init
            fi

            # Cleanup
            docker stack rm backend || true
            echo "Waiting for stack removal..."
            while docker stack ls | grep -q "backend"; do
              sleep 5
            done

            docker rm -f $(docker ps -aq) || true
            docker container prune -f
            docker network prune -f
            docker volume prune -f
            docker image prune -f

            # Create networks
            docker network create --driver overlay --attachable backend_backend || true
            docker network create --driver overlay --attachable backend_public || true
            echo "Waiting for networks to be ready..."
            while ! docker network ls | grep -q "backend_backend" || ! docker network ls | grep -q "backend_public"; do
              sleep 2
            done

            # Setup secrets
            mkdir -p secrets
            echo "${{ secrets.PG_USER }}" > secrets/pg_user.txt
            echo "${{ secrets.PG_PASSWORD }}" > secrets/pg_password.txt
            echo "${{ secrets.PG_DATABASE }}" > secrets/pg_database.txt
            echo "${{ secrets.JWT_SECRET }}" > secrets/app_jwt_secret.txt
            chmod 600 secrets/*.txt

            # Create Docker secrets
            echo "${{ secrets.PG_USER }}" | docker secret create backend_pg_user -
            echo "${{ secrets.PG_PASSWORD }}" | docker secret create backend_pg_password -
            echo "${{ secrets.PG_DATABASE }}" | docker secret create backend_pg_database -
            echo "${{ secrets.JWT_SECRET }}" | docker secret create backend_app_secret -

            # Set variables
            export GITHUB_OWNER="${{ github.repository_owner }}"
            export GITHUB_OWNER_LC=$(echo "$GITHUB_OWNER" | tr '[:upper:]' '[:lower:]')
            export TAG="${{ github.event.inputs.image_tag }}"
            export TAG=$(echo "$TAG" | tr -cd '[:alnum:]._-')
            export PG_USER="${{ secrets.PG_USER }}"
            export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"
            export PG_DATABASE="${{ secrets.PG_DATABASE }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Create compose files
            cat > docker-compose.database.yml << 'EOL'
            version: '3.8'
            secrets:
              backend_pg_password:
                external: true
              backend_pg_user:
                external: true
              backend_pg_database:
                external: true
            networks:
              backend_backend:
                name: backend_backend
                external: true
                driver: overlay
                driver_opts:
                  com.docker.network.driver.mtu: "1400"
            volumes:
              pg_data:
                name: backend_pg_data
            services:
              database:
                image: postgres:17-alpine
                networks:
                  backend_backend:
                    ipv4_address: 10.0.1.3
                volumes:
                  - pg_data:/var/lib/postgresql/data
                environment:
                  POSTGRES_USER_FILE: /run/secrets/backend_pg_user
                  POSTGRES_DB_FILE: /run/secrets/backend_pg_database
                  POSTGRES_PASSWORD_FILE: /run/secrets/backend_pg_password
                  PGDATA: /var/lib/postgresql/data/pgdata
                  POSTGRES_MAX_CONNECTIONS: "200"
                  POSTGRES_SHARED_BUFFERS: "2GB"
                  POSTGRES_EFFECTIVE_CACHE_SIZE: "6GB"
                  POSTGRES_MAINTENANCE_WORK_MEM: "512MB"
                  POSTGRES_WORK_MEM: "64MB"
                user: postgres
                ports:
                  - target: 5432
                    published: 5432
                    protocol: tcp
                    mode: host
                secrets:
                  - backend_pg_user
                  - backend_pg_database
                  - backend_pg_password
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                  start_period: 30s
                deploy:
                  replicas: 1
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  resources:
                    limits:
                      cpus: '2.0'
                      memory: 3G
                    reservations:
                      cpus: '1.0'
                      memory: 2G
                  update_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                  rollback_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                logging:
                  driver: json-file
                  options:
                    max-size: "100m"
                    max-file: "5"
                command: ["postgres", "-c", "log_statement=all", "-c", "log_connections=on", "-c", "log_disconnections=on"]
            EOL

            cat > docker-compose.traefik.yml << 'EOL'
            version: '3.8'
            secrets:
              backend_app_secret:
                external: true
            networks:
              backend_backend:
                name: backend_backend
                external: true
                driver: overlay
                driver_opts:
                  com.docker.network.driver.mtu: "1400"
              backend_public:
                name: backend_public
                external: true
                driver: overlay
                driver_opts:
                  com.docker.network.driver.mtu: "1400"
            services:
              traefik:
                image: traefik:v2.10
                command:
                  - "--api.insecure=true"
                  - "--providers.docker=true"
                  - "--providers.docker.swarmMode=true"
                  - "--providers.docker.exposedbydefault=false"
                  - "--providers.docker.network=backend_backend"
                  - "--providers.docker.watch=true"
                  - "--providers.docker.endpoint=unix:///var/run/docker.sock"
                  - "--providers.docker.swarmModeRefreshSeconds=15"
                  - "--providers.docker.constraints=Label(`traefik.enable`, `true`)"
                  - "--entrypoints.web.address=:80"
                  - "--log.level=DEBUG"
                  - "--accesslog=true"
                  - "--ping=true"
                  - "--ping.entryPoint=web"
                ports:
                  - target: 80
                    published: 80
                    protocol: tcp
                    mode: host
                  - target: 8080
                    published: 8080
                    protocol: tcp
                    mode: host
                networks:
                  backend_backend:
                    ipv4_address: 10.0.1.6
                  backend_public:
                    ipv4_address: 10.0.2.3
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock:ro
                deploy:
                  placement:
                    constraints:
                      - node.role == manager
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  resources:
                    limits:
                      cpus: '1.0'
                      memory: 1G
                    reservations:
                      cpus: '0.5'
                      memory: 512M
                  update_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                  rollback_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                logging:
                  driver: json-file
                  options:
                    max-size: "100m"
                    max-file: "5"
            EOL

            cat > docker-compose.backend.yml << 'EOL'
            version: '3.8'
            secrets:
              backend_app_secret:
                external: true
            networks:
              backend_backend:
                name: backend_backend
                external: true
                driver: overlay
                driver_opts:
                  com.docker.network.driver.mtu: "1400"
              backend_public:
                name: backend_public
                external: true
                driver: overlay
                driver_opts:
                  com.docker.network.driver.mtu: "1400"
            services:
              backend:
                image: ghcr.io/$GITHUB_OWNER_LC/mybudget-backend:$TAG
                networks:
                  backend_backend:
                    ipv4_address: 10.0.1.8
                  backend_public:
                    ipv4_address: 10.0.2.6
                environment:
                  PG_USER: "$PG_USER"
                  PG_PASSWORD: "$PG_PASSWORD"
                  PG_DATABASE: "$PG_DATABASE"
                  DATABASE_URL: "jdbc:postgresql://database:5432/$PG_DATABASE?reconnect=true&connectTimeout=30&socketTimeout=30&tcpKeepAlive=true"
                  JWT_SECRET: "$JWT_SECRET"
                  SPRING_PROFILES_ACTIVE: prod
                  SERVER_PORT: 8082
                  # CORS settings
                  SPRING_SECURITY_CORS_ALLOWED_ORIGINS: "*"
                  SPRING_SECURITY_CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS,PATCH"
                  SPRING_SECURITY_CORS_ALLOWED_HEADERS: "Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers"
                  SPRING_SECURITY_CORS_EXPOSED_HEADERS: "Authorization,Content-Type"
                  SPRING_SECURITY_CORS_ALLOW_CREDENTIALS: "true"
                  SPRING_SECURITY_CORS_MAX_AGE: "3600"
                  # Database connection pool
                  SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000
                  SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 20
                  SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
                  SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 300000
                  SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: 1200000
                  SPRING_DATASOURCE_HIKARI_VALIDATION_TIMEOUT: 5000
                  SPRING_DATASOURCE_HIKARI_LEAK_DETECTION_THRESHOLD: 60000
                  # JVM settings
                  SPRING_JVM_MEMORY_XMS: "1g"
                  SPRING_JVM_MEMORY_XMX: "2g"
                  SPRING_JVM_MEMORY_XX_MAXMETASPACESIZE: "256m"
                  # Tomcat settings
                  SERVER_TOMCAT_MAX_THREADS: "200"
                  SERVER_TOMCAT_MIN_SPARE_THREADS: "20"
                  SERVER_TOMCAT_MAX_CONNECTIONS: "10000"
                  SERVER_TOMCAT_ACCEPT_COUNT: "100"
                  SERVER_TOMCAT_CONNECTION_TIMEOUT: "20000"
                  # Compression settings
                  SERVER_COMPRESSION_ENABLED: "true"
                  SERVER_COMPRESSION_MIME_TYPES: "application/json,application/xml,text/html,text/xml,text/plain,text/css,application/javascript,text/javascript"
                  SERVER_COMPRESSION_MIN_RESPONSE_SIZE: "2048"
                  # Cache settings
                  SPRING_CACHE_TYPE: "caffeine"
                  SPRING_CACHE_CAFFEINE_SPEC: "maximumSize=500,expireAfterWrite=600s"
                ports:
                  - target: 8082
                    published: 8082
                    protocol: tcp
                    mode: host
                secrets:
                  - backend_app_secret
                deploy:
                  labels:
                    - "traefik.enable=true"
                    - "traefik.docker.network=backend_backend"
                    - "traefik.http.routers.backend.rule=Host('51.250.65.154')"
                    - "traefik.http.routers.backend.entrypoints=web"
                    - "traefik.http.services.backend.loadbalancer.server.port=8082"
                    # CORS middleware
                    - "traefik.http.middlewares.cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE,OPTIONS,PATCH"
                    - "traefik.http.middlewares.cors.headers.accessControlAllowOriginList=*"
                    - "traefik.http.middlewares.cors.headers.accessControlAllowHeaders=Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers"
                    - "traefik.http.middlewares.cors.headers.accessControlExposeHeaders=Authorization,Content-Type"
                    - "traefik.http.middlewares.cors.headers.accessControlAllowCredentials=true"
                    - "traefik.http.middlewares.cors.headers.accessControlMaxAge=3600"
                    - "traefik.http.routers.backend.middlewares=cors"
                    - "traefik.http.services.backend.loadbalancer.passHostHeader=true"
                    # Compression middleware
                    - "traefik.http.middlewares.compress.compress=true"
                    - "traefik.http.routers.backend.middlewares=compress@docker,cors"
                    # Rate limiting
                    - "traefik.http.middlewares.ratelimit.ratelimit.average=100"
                    - "traefik.http.middlewares.ratelimit.ratelimit.burst=50"
                    - "traefik.http.routers.backend.middlewares=ratelimit@docker,compress@docker,cors"
                healthcheck:
                  test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8082/ping || exit 1"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
                deploy:
                  mode: replicated
                  replicas: 2
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  resources:
                    limits:
                      cpus: '2.0'
                      memory: 2G
                    reservations:
                      cpus: '1.0'
                      memory: 1G
                  update_config:
                    parallelism: 1
                    delay: 15s
                    order: start-first
                    failure_action: rollback
                  rollback_config:
                    parallelism: 1
                    delay: 15s
                    order: start-first
                logging:
                  driver: json-file
                  options:
                    max-size: "100m"
                    max-file: "5"
            EOL

            # Deploy services
            echo "Deploying database..."
            docker stack deploy -c docker-compose.database.yml backend --with-registry-auth
            echo "Waiting for database to be ready..."
            while ! docker service ls | grep -q "backend_database.*1/1"; do
              sleep 5
            done

            echo "Deploying traefik..."
            docker stack deploy -c docker-compose.traefik.yml backend --with-registry-auth
            echo "Waiting for traefik to be ready..."
            while ! docker service ls | grep -q "backend_traefik.*1/1"; do
              sleep 5
            done

            echo "Deploying backend..."
            docker stack deploy -c docker-compose.backend.yml backend --with-registry-auth
            echo "Waiting for backend to be ready..."
            while ! docker service ls | grep -q "backend_backend.*2/2"; do
              sleep 5
            done

            # Verify services
            for service in backend_database backend_traefik backend_backend; do
              if ! docker service ls | grep -q "$service"; then
                echo "Error: Service $service failed to deploy"
                exit 1
              fi
            done

            # Save logs
            docker service logs backend_backend --tail 10 > backend_backend.log || true
            docker service logs backend_database --tail 10 > backend_database.log || true
            docker service logs backend_traefik --tail 10 > backend_traefik.log || true

      - name: Download logs
        if: always()
        run: |
          scp -i ${{ secrets.SERVER_SSH_KEY }} -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/mybudget/backend/*.log .

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: "*.log"