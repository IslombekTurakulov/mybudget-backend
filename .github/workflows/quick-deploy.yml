name: Quick Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Create directory if it doesn't exist
            sudo mkdir -p /opt/mybudget/backend
            sudo chown -R $USER:$USER /opt/mybudget/backend
            cd /opt/mybudget/backend
            
            # Check Docker Swarm status
            echo "Checking Docker Swarm status..."
            if ! docker info | grep -q "Swarm: active"; then
              echo "Initializing Docker Swarm..."
              docker swarm init
            fi
            
            # Check node status
            echo "Checking node status..."
            if ! docker node ls | grep -q "Ready"; then
              echo "Error: No nodes are ready"
              exit 1
            fi
            
            # Clean up existing resources
            echo "Cleaning up existing resources..."
            docker stack rm backend || true
            sleep 10
            
            # Remove all stopped containers
            echo "Removing stopped containers..."
            docker container prune -f
            
            # Remove unused networks
            echo "Removing unused networks..."
            docker network prune -f
            
            # Remove unused volumes
            echo "Removing unused volumes..."
            docker volume prune -f
            
            # Remove unused images
            echo "Removing unused images..."
            docker image prune -f
            
            # Create networks if they don't exist
            echo "Creating networks..."
            docker network create --driver overlay --attachable backend || true
            docker network create --driver overlay --attachable public || true
            sleep 5
            
            # Create .env file
            cat > .env << EOL
            PG_USER=${{ secrets.PG_USER }}
            PG_DATABASE=${{ secrets.PG_DATABASE }}
            GITHUB_OWNER=islombekturakulov
            TAG=${{ github.event.inputs.image_tag }}
            LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            EOL
            
            # Verify environment variables
            echo "Verifying environment variables..."
            if [ -z "${{ secrets.PG_USER }}" ] || [ -z "${{ secrets.PG_DATABASE }}" ] || [ -z "${{ secrets.PG_PASSWORD }}" ] || [ -z "${{ secrets.JWT_SECRET }}" ]; then
              echo "Error: Missing required environment variables"
              exit 1
            fi
            
            # Create secrets directory if it doesn't exist
            mkdir -p secrets
            
            # Create password files
            echo "${{ secrets.PG_PASSWORD }}" > secrets/pg_password.txt
            echo "${{ secrets.JWT_SECRET }}" > secrets/app_jwt_secret.txt
            
            # Set proper permissions
            chmod 600 secrets/pg_password.txt secrets/app_jwt_secret.txt
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Verify docker-compose.yml exists
            if [ ! -f "docker-compose.yml" ]; then
              echo "Error: docker-compose.yml not found"
              exit 1
            fi
            
            # Pull latest images and deploy
            echo "Deploying stack..."
            docker stack deploy -c docker-compose.yml backend --with-registry-auth
            
            # Wait for services to be ready
            echo "Waiting for services to be ready..."
            sleep 30
            
            # Check service status
            echo "Checking service status..."
            docker service ls
            
            # Check if all replicas are running
            echo "Checking replicas..."
            docker service ps backend_backend --no-trunc || true
            docker service ps backend_database --no-trunc || true
            docker service ps backend_traefik --no-trunc || true
            
            # Check network connectivity
            echo "Checking networks..."
            docker network ls | grep backend
            
            # Check logs for any immediate issues
            echo "Checking service logs..."
            docker service logs --tail 50 backend_backend || true
            docker service logs --tail 50 backend_database || true
            docker service logs --tail 50 backend_traefik || true
            
            # Check if ports are open
            echo "Checking if ports are open..."
            if command -v netstat &> /dev/null; then
              netstat -tulpn | grep -E '80|443' || true
            else
              echo "netstat not available, skipping port check"
            fi
            
            # Verify health endpoints
            echo "Verifying health endpoints..."
            max_retries=5
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              if curl -f http://89.169.144.44/ping; then
                echo "Health check passed"
                break
              fi
              retry_count=$((retry_count + 1))
              echo "Health check attempt $retry_count failed, retrying..."
              sleep 10
            done
            
            if [ $retry_count -eq $max_retries ]; then
              echo "Error: Health check failed after $max_retries attempts"
              exit 1
            fi
            
            # Check resource usage
            echo "Checking resource usage..."
            docker stats --no-stream
            
            # Final status
            echo "Deployment completed. Checking final status..."
            docker stack services backend 