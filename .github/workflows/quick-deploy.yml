name: Quick Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Проверка наличия docker
            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed!"
              exit 1
            fi

            # Проверка наличия docker-compose
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose is not installed!"
              exit 1
            fi

            # Не удаляем volume-ы по умолчанию! Для полного сброса используйте флаг FULL_RESET
            if [ "$FULL_RESET" = "true" ]; then
              echo "FULL_RESET enabled: removing all volumes, including database!"
              docker volume rm backend_pg_data || true
              docker volume rm backend_traefik_pg_data || true
            else
              echo "Skipping volume removal (FULL_RESET not set)"
            fi

            # Create directory if it doesn't exist
            sudo mkdir -p /opt/mybudget/backend
            sudo chown -R $USER:$USER /opt/mybudget/backend
            cd /opt/mybudget/backend
            
            # Check Docker Swarm status
            echo "Checking Docker Swarm status..."
            if ! docker info | grep -q "Swarm: active"; then
              echo "Initializing Docker Swarm..."
              docker swarm init
            fi
            
            # Check node status
            echo "Checking node status..."
            if ! docker node ls | grep -q "Ready"; then
              echo "Error: No nodes are ready"
              exit 1
            fi
            
            # Clean up existing resources
            echo "Cleaning up existing resources..."
            docker stack rm backend || true
            sleep 10
            
            # Force remove all containers
            echo "Force removing all containers..."
            CONTAINERS=$(docker ps -aq)
            if [ -n "$CONTAINERS" ]; then
              docker rm -f $CONTAINERS
            fi
            sleep 5
            
            # Remove all stopped containers
            echo "Removing stopped containers..."
            docker container prune -f
            
            # Remove unused networks
            echo "Removing unused networks..."
            docker network prune -f
            
            # Remove unused volumes
            echo "Removing unused volumes..."
            docker volume prune -f
            
            # Remove unused images
            echo "Removing unused images..."
            docker image prune -f
            
            # Create networks if they don't exist
            echo "Creating networks..."
            docker network create --driver overlay --attachable backend || true
            docker network create --driver overlay --attachable public || true
            sleep 5
            
            # Create .env file
            cat > .env << EOL
            PG_USER=${{ secrets.PG_USER }}
            PG_PASSWORD=${{ secrets.PG_PASSWORD }}
            PG_DATABASE=${{ secrets.PG_DATABASE }}
            GITHUB_OWNER=islombekturakulov
            TAG=${{ github.event.inputs.image_tag }}
            LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            EOL

            # Export DB variables for backend
            export PG_USER="${{ secrets.PG_USER }}"
            export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"
            export PG_DATABASE="${{ secrets.PG_DATABASE }}"

            # Echo variables for debug
            echo "GITHUB_OWNER=$(grep GITHUB_OWNER .env | cut -d'=' -f2)"
            echo "TAG=$(grep TAG .env | cut -d'=' -f2)"
            
            # Verify environment variables
            echo "Verifying environment variables..."
            if [ -z "${{ secrets.PG_USER }}" ] || [ -z "${{ secrets.PG_DATABASE }}" ] || [ -z "${{ secrets.PG_PASSWORD }}" ] || [ -z "${{ secrets.JWT_SECRET }}" ]; then
              echo "Error: Missing required environment variables"
              exit 1
            fi

            # Set variables from GitHub Actions context
            GITHUB_OWNER="${{ github.repository_owner }}"
            GITHUB_OWNER_LC=$(echo "$GITHUB_OWNER" | tr '[:upper:]' '[:lower:]')
            TAG="${{ github.event.inputs.image_tag }}"
            echo "GITHUB_OWNER=$GITHUB_OWNER"
            echo "GITHUB_OWNER_LC=$GITHUB_OWNER_LC"
            echo "TAG=$TAG"

            # Validate image tag and owner
            if [ -z "$GITHUB_OWNER_LC" ]; then
              echo "Error: GITHUB_OWNER_LC is required"
              exit 1
            fi
            if [ -z "$TAG" ]; then
              echo "Error: TAG is required"
              exit 1
            fi
            
            # Create secrets directory if it doesn't exist
            mkdir -p secrets
            
            # Create password files
            echo "${{ secrets.PG_PASSWORD }}" > secrets/pg_password.txt
            echo "${{ secrets.JWT_SECRET }}" > secrets/app_jwt_secret.txt
            
            # Set proper permissions
            chmod 600 secrets/pg_password.txt secrets/app_jwt_secret.txt
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Create docker-compose.yml with correct configuration
            cat > docker-compose.yml << EOL
            version: '3.9'

            secrets:
              pg_password:
                file: ./secrets/pg_password.txt
              app_secret:
                file: ./secrets/app_jwt_secret.txt

            networks:
              backend:
                driver: overlay
                attachable: true
              public:
                driver: overlay
                attachable: true

            volumes:
              pg_data:
              letsencrypt:
              traefik_logs:

            services:
              traefik:
                image: traefik:v2.11
                networks:
                  - public
                  - backend
                command:
                  - "--providers.docker=true"
                  - "--providers.docker.swarmMode=true"
                  - "--providers.docker.exposedByDefault=false"
                  - "--entrypoints.web.address=:80"
                  - "--entrypoints.websecure.address=:443"
                  - "--entrypoints.dashboard.address=:8081"
                  - "--certificatesresolvers.leresolver.acme.email=\${LETSENCRYPT_EMAIL}"
                  - "--certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json"
                  - "--certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web"
                  - "--log.level=INFO"
                  - "--accesslog=true"
                  - "--accesslog.filepath=/var/log/traefik/access.log"
                  - "--metrics.prometheus=true"
                  - "--api.dashboard=true"
                  - "--api.insecure=true"
                  - "--providers.docker.network=public"
                  - "--providers.docker.watch=true"
                  - "--providers.docker.swarmModeRefreshSeconds=15s"
                ports:
                  - "80:80"
                  - "443:443"
                  - "8081:8081"
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock:ro
                  - letsencrypt:/letsencrypt
                  - traefik_logs:/var/log/traefik
                healthcheck:
                  test: ["CMD", "traefik", "healthcheck"]
                  interval: 30s
                  timeout: 5s
                  retries: 3
                deploy:
                  mode: global
                  placement:
                    constraints:
                      - node.role == manager
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  update_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                  rollback_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                logging:
                  driver: json-file
                  options:
                    max-size: "5m"
                    max-file: "5"

              database:
                image: postgres:17-alpine
                networks:
                  - backend
                volumes:
                  - pg_data:/var/lib/postgresql/data
                environment:
                  POSTGRES_USER: "\${PG_USER}"
                  POSTGRES_DB: "\${PG_DATABASE}"
                  POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
                secrets:
                  - pg_password
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U $$(printenv POSTGRES_USER) -d $$(printenv POSTGRES_DB)"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                  start_period: 30s
                deploy:
                  replicas: 1
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  resources:
                    limits:
                      cpus: '0.5'
                      memory: 512M
                  update_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                  rollback_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                  placement:
                    constraints:
                      - node.role == manager

              backend:
                image: ghcr.io/${GITHUB_OWNER_LC}/mybudget-backend:${TAG}
                networks:
                  - backend
                  - public
                depends_on:
                  - database
                environment:
                  PG_USER: "\${PG_USER}"
                  PG_PASSWORD: "\${PG_PASSWORD}"
                  PG_DATABASE: "\${PG_DATABASE}"
                  DATABASE_URL: jdbc:postgresql://database:5432/\${PG_DATABASE}
                  JWT_SECRET: /run/secrets/app_secret
                  SPRING_PROFILES_ACTIVE: prod
                  SERVER_PORT: 8082
                  SPRING_SECURITY_CORS_ALLOWED_ORIGINS: "*"
                  SPRING_SECURITY_CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
                  SPRING_SECURITY_CORS_ALLOWED_HEADERS: "*"
                  SPRING_SECURITY_CORS_ALLOW_CREDENTIALS: "true"
                  LETSENCRYPT_EMAIL: "\${LETSENCRYPT_EMAIL}"
                secrets:
                  - app_secret
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.backend.rule=Host(\'51.250.65.154\')"
                  - "traefik.http.routers.backend.entrypoints=web"
                  - "traefik.http.services.backend.loadbalancer.server.port=8082"
                  - "traefik.http.middlewares.cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE,OPTIONS"
                  - "traefik.http.middlewares.cors.headers.accessControlAllowOriginList=*"
                  - "traefik.http.middlewares.cors.headers.accessControlAllowHeaders=*"
                  - "traefik.http.middlewares.cors.headers.accessControlAllowCredentials=true"
                  - "traefik.http.middlewares.cors.headers.accessControlMaxAge=100"
                  - "traefik.http.routers.backend.middlewares=cors"
                  - "traefik.http.services.backend.loadbalancer.passHostHeader=true"
                healthcheck:
                  test: ["CMD-SHELL", "curl -f http://localhost:8082/ping || exit 1"]
                  interval: 30s
                  timeout: 5s
                  retries: 3
                  start_period: 40s
                deploy:
                  mode: replicated
                  replicas: 2
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  resources:
                    limits:
                      cpus: '1.0'
                      memory: 1G
                  update_config:
                    parallelism: 1
                    delay: 15s
                    order: start-first
                    failure_action: rollback
                  rollback_config:
                    parallelism: 1
                    delay: 15s
                    order: start-first
                logging:
                  driver: json-file
                  options:
                    max-size: "10m"
                    max-file: "3"
            EOL
            
            # Проверка свободного места на диске
            echo "Checking disk space..."
            df -h
            free_space=$(df --output=avail -k / | tail -1)
            if [ "$free_space" -lt 2097152 ]; then
              echo "Warning: Less than 2GB disk space available!"
            fi

            # Проверка docker compose config
            echo "Verifying docker-compose.yml..."
            docker compose config

            # Deploy stack
            echo "Deploying stack..."
            docker stack deploy -c docker-compose.yml backend --with-registry-auth

            # Ожидание readiness всех сервисов
            echo "Waiting for all services to be ready..."
            services=(backend_backend backend_database backend_traefik)
            for service in "${services[@]}"; do
              max_retries=18
              retry_count=0
              while [ $retry_count -lt $max_retries ]; do
                ready=$(docker service ls | grep $service | awk '{print $4}' | grep -E '^[1-9]+/[1-9]+' || true)
                if [ -n "$ready" ]; then
                  echo "$service is running: $ready"
                  break
                fi
                retry_count=$((retry_count + 1))
                echo "Waiting for $service to be ready... ($retry_count/$max_retries)"
                sleep 10
              done
              if [ $retry_count -eq $max_retries ]; then
                echo "$service did not become ready in time"
                docker service ls
                docker service ps $service --no-trunc || true
                exit 1
              fi
            done
            
            # Check service status with more details
            echo "Checking service status..."
            docker service ls
            
            # Check stack status
            echo "Checking stack status..."
            docker stack ps backend --no-trunc
            
            # Check if all replicas are running with more detailed output
            echo "Checking replicas with detailed status..."
            for service in backend_backend backend_database backend_traefik; do
              echo "Checking service: $service"
              docker service ps $service --no-trunc || echo "Service $service not found"
              echo "Service logs for $service:"
              docker service logs $service --tail 50 || echo "No logs available for $service"
              echo "----------------------------------------"
            done
            
            # Check network connectivity
            echo "Checking networks..."
            docker network ls | grep backend
            
            # Check if ports are open
            echo "Checking if ports are open..."
            if command -v netstat &> /dev/null; then
              netstat -tulpn | grep -E '80|443' || true
            else
              echo "netstat not available, skipping port check"
            fi
            
            # Verify health endpoints with more detailed output
            echo "Verifying health endpoints..."
            max_retries=5
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              echo "Attempt $((retry_count + 1)) of $max_retries"
              if curl -v http://51.250.65.154/ping; then
                echo "Health check passed"
                break
              fi
              retry_count=$((retry_count + 1))
              echo "Health check attempt $retry_count failed, retrying..."
              sleep 10
            done
            
            if [ $retry_count -eq $max_retries ]; then
              echo "Error: Health check failed after $max_retries attempts"
              echo "Checking service status one more time..."
              docker service ls
              docker stack ps backend --no-trunc
              exit 1
            fi
            
            # Check resource usage
            echo "Checking resource usage..."
            docker stats --no-stream
            
            # Final status with detailed information
            echo "Deployment completed. Checking final status..."
            echo "Stack services:"
            docker stack services backend 
            echo "Stack tasks:"
            docker stack ps backend --no-trunc
            echo "Service logs:"
            for service in backend_backend backend_database backend_traefik; do
              echo "Logs for $service:"
              docker service logs $service --tail 50 || echo "No logs available for $service"
              echo "----------------------------------------"
            done

            # Сохраняем логи деплоя в файл для артефакта
            docker service logs backend_backend --tail 200 > backend_backend.log || true
            docker service logs backend_database --tail 200 > backend_database.log || true
            docker service logs backend_traefik --tail 200 > backend_traefik.log || true

      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: |
            /opt/mybudget/backend/backend_backend.log
            /opt/mybudget/backend/backend_database.log
            /opt/mybudget/backend/backend_traefik.log