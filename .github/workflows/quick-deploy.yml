name: Quick Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Create directory if it doesn't exist
            sudo mkdir -p /opt/mybudget/backend
            sudo chown -R $USER:$USER /opt/mybudget/backend
            cd /opt/mybudget/backend
            
            # Check Docker Swarm status
            echo "Checking Docker Swarm status..."
            docker info | grep Swarm
            
            # Check node status
            echo "Checking node status..."
            docker node ls
            
            # Clean up existing resources
            echo "Cleaning up existing resources..."
            docker stack rm backend || true
            sleep 10
            docker network rm backend_backend backend_public || true
            sleep 5
            
            # Create docker-compose.yml
            cat > docker-compose.yml << 'EOL'
            version: '3.9'

            secrets:
              pg_password:
                file: ./secrets/pg_password.txt
              app_secret:
                file: ./secrets/app_jwt_secret.txt

            networks:
              backend:
                driver: overlay
                attachable: true
              public:
                driver: overlay
                attachable: true

            volumes:
              pg_data:
              letsencrypt:
              traefik_logs:

            services:
              database:
                image: postgres:17-alpine
                networks:
                  - backend
                volumes:
                  - pg_data:/var/lib/postgresql/data
                environment:
                  POSTGRES_USER: ${PG_USER}
                  POSTGRES_DB: ${PG_DATABASE}
                  POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
                secrets:
                  - pg_password
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                  start_period: 30s
                deploy:
                  replicas: 1
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  resources:
                    limits:
                      cpus: '0.5'
                      memory: 512M
                  update_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                  rollback_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                  placement:
                    constraints:
                      - node.role == manager

              backend:
                image: ghcr.io/islombekturakulov/mybudget-backend:${{ github.event.inputs.image_tag }}
                networks:
                  - backend
                  - public
                depends_on:
                  - database
                environment:
                  DATABASE_URL: jdbc:postgresql://database:5432/${PG_DATABASE}
                  JWT_SECRET: /run/secrets/app_secret
                  SPRING_PROFILES_ACTIVE: prod
                  SERVER_PORT: 8080
                  SPRING_SECURITY_CORS_ALLOWED_ORIGINS: "*"
                  SPRING_SECURITY_CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
                  SPRING_SECURITY_CORS_ALLOWED_HEADERS: "*"
                  SPRING_SECURITY_CORS_ALLOW_CREDENTIALS: "true"
                secrets:
                  - app_secret
                ports:
                  - target: 8080
                    published: 8080
                    protocol: tcp
                    mode: host
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.backend.rule=Host(`89.169.144.44`)"
                  - "traefik.http.routers.backend.entrypoints=web"
                  - "traefik.http.services.backend.loadbalancer.server.port=8080"
                  - "traefik.http.middlewares.cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE,OPTIONS"
                  - "traefik.http.middlewares.cors.headers.accessControlAllowOriginList=*"
                  - "traefik.http.middlewares.cors.headers.accessControlAllowHeaders=*"
                  - "traefik.http.middlewares.cors.headers.accessControlAllowCredentials=true"
                  - "traefik.http.middlewares.cors.headers.accessControlMaxAge=100"
                  - "traefik.http.routers.backend.middlewares=cors"
                  - "traefik.http.services.backend.loadbalancer.passHostHeader=true"
                healthcheck:
                  test: ["CMD-SHELL", "curl -f http://localhost:8080/ping || exit 1"]
                  interval: 30s
                  timeout: 5s
                  retries: 3
                  start_period: 40s
                deploy:
                  mode: replicated
                  replicas: 2
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  resources:
                    limits:
                      cpus: '1.0'
                      memory: 1G
                  update_config:
                    parallelism: 1
                    delay: 15s
                    order: start-first
                    failure_action: rollback
                  rollback_config:
                    parallelism: 1
                    delay: 15s
                    order: start-first
                  placement:
                    constraints:
                      - node.role == worker
                logging:
                  driver: json-file
                  options:
                    max-size: "10m"
                    max-file: "3"

              traefik:
                image: traefik:v2.11
                networks:
                  - public
                  - backend
                command:
                  - "--providers.docker=true"
                  - "--providers.docker.swarmMode=true"
                  - "--providers.docker.exposedByDefault=false"
                  - "--entrypoints.web.address=:80"
                  - "--entrypoints.websecure.address=:443"
                  - "--certificatesresolvers.leresolver.acme.email=${LETSENCRYPT_EMAIL}"
                  - "--certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json"
                  - "--certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web"
                  - "--log.level=INFO"
                  - "--accesslog=true"
                  - "--accesslog.filepath=/var/log/traefik/access.log"
                  - "--metrics.prometheus=true"
                  - "--api.dashboard=true"
                  - "--api.insecure=true"
                  - "--providers.docker.network=backend_public"
                  - "--providers.docker.watch=true"
                  - "--providers.docker.swarmModeRefreshSeconds=15s"
                ports:
                  - "80:80"
                  - "443:443"
                  - "8080:8080"
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock:ro
                  - letsencrypt:/letsencrypt
                  - traefik_logs:/var/log/traefik
                healthcheck:
                  test: ["CMD", "traefik", "healthcheck"]
                  interval: 30s
                  timeout: 5s
                  retries: 3
                deploy:
                  mode: global
                  placement:
                    constraints:
                      - node.role == manager
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  update_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                  rollback_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                logging:
                  driver: json-file
                  options:
                    max-size: "5m"
                    max-file: "5"
            EOL

            # Create .env file
            cat > .env << EOL
            PG_USER=${{ secrets.PG_USER }}
            PG_DATABASE=${{ secrets.PG_DATABASE }}
            GITHUB_OWNER=islombekturakulov
            TAG=${{ github.event.inputs.image_tag }}
            LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            EOL
            
            # Create secrets directory if it doesn't exist
            mkdir -p secrets
            
            # Create password files
            echo "${{ secrets.PG_PASSWORD }}" > secrets/pg_password.txt
            echo "${{ secrets.JWT_SECRET }}" > secrets/app_jwt_secret.txt
            
            # Set proper permissions
            chmod 600 secrets/pg_password.txt secrets/app_jwt_secret.txt
            
            # Login to GitHub Container Registry with proper authentication
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Verify login and pull the image
            echo "Verifying image access..."
            docker pull ghcr.io/islombekturakulov/mybudget-backend:${{ github.event.inputs.image_tag }}
            
            # Pull latest images and deploy
            echo "Deploying stack..."
            docker stack deploy -c docker-compose.yml backend --with-registry-auth

            # Wait for services to be ready
            echo "Waiting for services to be ready..."
            sleep 30

            # Check service status
            echo "Checking service status..."
            docker service ls

            # Check if all replicas are running
            echo "Checking replicas..."
            docker service ps backend_backend --no-trunc || true
            docker service ps backend_database --no-trunc || true
            docker service ps backend_traefik --no-trunc || true

            # Check network connectivity
            echo "Checking networks..."
            docker network ls | grep backend

            # Check logs for any immediate issues
            echo "Checking service logs..."
            docker service logs --tail 50 backend_backend || true
            docker service logs --tail 50 backend_database || true
            docker service logs --tail 50 backend_traefik || true

            # Check if ports are open
            echo "Checking if ports are open..."
            netstat -tulpn | grep -E '80|443' || true

            # Verify health endpoints
            echo "Verifying health endpoints..."
            curl -v http://89.169.144.44/ping || echo "Backend health check failed"

            # Check resource usage
            echo "Checking resource usage..."
            docker stats --no-stream

            # Final status
            echo "Deployment completed. Checking final status..."
            docker stack services backend 