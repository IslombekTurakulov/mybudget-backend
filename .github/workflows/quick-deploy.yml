name: Quick Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate secrets
        run: |
          # Check required secrets
          if [ -z "${{ secrets.SERVER_HOST }}" ]; then
            echo "Error: Required secret SERVER_HOST is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SERVER_USER }}" ]; then
            echo "Error: Required secret SERVER_USER is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "Error: Required secret SERVER_SSH_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PG_USER }}" ]; then
            echo "Error: Required secret PG_USER is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PG_PASSWORD }}" ]; then
            echo "Error: Required secret PG_PASSWORD is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PG_DATABASE }}" ]; then
            echo "Error: Required secret PG_DATABASE is not set"
            exit 1
          fi
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "Error: Required secret JWT_SECRET is not set"
            exit 1
          fi
          echo "All required secrets are set"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            #!/bin/bash
            set -e

            # Check for required tools
            if ! command -v docker &> /dev/null; then
              echo "Error: Docker is not installed"
              exit 1
            fi

            if ! command -v docker-compose &> /dev/null; then
              echo "Error: docker-compose is not installed"
              exit 1
            fi

            # Handle volume cleanup based on FULL_RESET flag
            if [ "${FULL_RESET:-false}" = "true" ]; then
              echo "FULL_RESET enabled: removing all volumes, including database"
              docker volume rm backend_pg_data || true
              docker volume rm backend_traefik_pg_data || true
            else
              echo "Skipping volume removal (FULL_RESET not set)"
            fi

            # Setup environment
            sudo mkdir -p /opt/mybudget/backend
            sudo chown -R $USER:$USER /opt/mybudget/backend
            cd /opt/mybudget/backend

            # Initialize Docker Swarm if needed
            echo "Checking Docker Swarm status..."
            if ! docker info | grep -q "Swarm: active"; then
              echo "Initializing Docker Swarm..."
              docker swarm init
            fi

            # Verify node status
            echo "Checking node status..."
            if ! docker node ls | grep -q "Ready"; then
              echo "Error: No nodes are ready"
              exit 1
            fi

            # Cleanup existing resources
            echo "Cleaning up existing resources..."
            docker stack rm backend || true
            sleep 10

            # Safely remove containers
            echo "Removing containers..."
            CONTAINERS=$(docker ps -aq)
            if [ -n "$CONTAINERS" ]; then
              docker rm -f $CONTAINERS || true
            fi
            sleep 5

            # Cleanup Docker resources
            echo "Cleaning up Docker resources..."
            docker container prune -f
            docker network prune -f
            docker volume prune -f
            docker image prune -f

            # Create networks
            echo "Creating networks..."
            docker network create --driver overlay --attachable backend_backend || true
            docker network create --driver overlay --attachable backend_public || true
            sleep 5

            # Cleanup existing secrets
            echo "Cleaning up existing secrets..."
            docker secret rm backend_pg_user backend_pg_database backend_pg_password backend_app_secret || true
            sleep 5

            # Setup secrets
            echo "Setting up secrets..."
            mkdir -p secrets
            echo "${{ secrets.PG_USER }}" > secrets/pg_user.txt
            echo "${{ secrets.PG_PASSWORD }}" > secrets/pg_password.txt
            echo "${{ secrets.PG_DATABASE }}" > secrets/pg_database.txt
            echo "${{ secrets.JWT_SECRET }}" > secrets/app_jwt_secret.txt
            chmod 600 secrets/*.txt

            # Create Docker secrets
            echo "Creating Docker secrets..."
            echo "${{ secrets.PG_USER }}" | docker secret create backend_pg_user -
            echo "${{ secrets.PG_PASSWORD }}" | docker secret create backend_pg_password -
            echo "${{ secrets.PG_DATABASE }}" | docker secret create backend_pg_database -
            echo "${{ secrets.JWT_SECRET }}" | docker secret create backend_app_secret -

            # Verify secrets
            echo "Verifying secrets..."
            for secret in backend_pg_user backend_pg_database backend_pg_password backend_app_secret; do
              if ! docker secret inspect $secret > /dev/null 2>&1; then
                echo "Error: Secret $secret was not created properly"
                exit 1
              fi
            done

            # Set and validate variables
            GITHUB_OWNER="${{ github.repository_owner }}"
            GITHUB_OWNER_LC=$(echo "$GITHUB_OWNER" | tr '[:upper:]' '[:lower:]')
            TAG="${GITHUB_EVENT_INPUTS_IMAGE_TAG:-latest}"
            TAG=$(echo "$TAG" | tr -cd '[:alnum:]._-')

            # Export environment variables
            export PG_USER="${{ secrets.PG_USER }}"
            export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"
            export PG_DATABASE="${{ secrets.PG_DATABASE }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export TAG="$TAG"
            export GITHUB_OWNER_LC="$GITHUB_OWNER_LC"

            # Verify environment variables
            echo "Verifying environment variables..."
            for var in PG_USER PG_DATABASE PG_PASSWORD JWT_SECRET GITHUB_OWNER_LC; do
              if [ -z "${!var}" ]; then
                echo "Error: Required environment variable $var is not set"
                exit 1
              fi
            done

            # Create .env file
            echo "Creating .env file..."
            cat > .env << EOL
            PG_USER=$PG_USER
            PG_PASSWORD=$PG_PASSWORD
            PG_DATABASE=$PG_DATABASE
            JWT_SECRET=$JWT_SECRET
            TAG=$TAG
            GITHUB_OWNER_LC=$GITHUB_OWNER_LC
            EOL

            # Login to GitHub Container Registry
            echo "Logging in to GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Verify image exists
            echo "Verifying image exists..."
            if ! docker pull ghcr.io/$GITHUB_OWNER_LC/mybudget-backend:$TAG; then
              echo "Error: Failed to pull image from GitHub Container Registry"
              exit 1
            fi

            # Create compose files
            echo "Creating compose files..."

            # Database compose file
            cat > docker-compose.database.yml << 'EOL'
            version: '3.8'
            secrets:
              backend_pg_password:
                external: true
              backend_pg_user:
                external: true
              backend_pg_database:
                external: true
            networks:
              backend_backend:
                name: backend_backend
                external: true
                driver: overlay
                driver_opts:
                  com.docker.network.driver.mtu: "1400"
            volumes:
              pg_data:
                name: backend_pg_data
            services:
              database:
                image: postgres:17-alpine
                networks:
                  backend_backend:
                    ipv4_address: 10.0.1.3
                volumes:
                  - pg_data:/var/lib/postgresql/data
                environment:
                  POSTGRES_USER_FILE: /run/secrets/backend_pg_user
                  POSTGRES_DB_FILE: /run/secrets/backend_pg_database
                  POSTGRES_PASSWORD_FILE: /run/secrets/backend_pg_password
                  PGDATA: /var/lib/postgresql/data/pgdata
                  POSTGRES_MAX_CONNECTIONS: "200"
                  POSTGRES_SHARED_BUFFERS: "2GB"
                  POSTGRES_EFFECTIVE_CACHE_SIZE: "6GB"
                  POSTGRES_MAINTENANCE_WORK_MEM: "512MB"
                  POSTGRES_WORK_MEM: "64MB"
                user: postgres
                ports:
                  - target: 5432
                    published: 5432
                    protocol: tcp
                    mode: host
                secrets:
                  - backend_pg_user
                  - backend_pg_database
                  - backend_pg_password
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                  start_period: 30s
                deploy:
                  replicas: 1
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  resources:
                    limits:
                      cpus: '2.0'
                      memory: 3G
                    reservations:
                      cpus: '1.0'
                      memory: 2G
                  update_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                  rollback_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                logging:
                  driver: json-file
                  options:
                    max-size: "100m"
                    max-file: "5"
                command: ["postgres", "-c", "log_statement=all", "-c", "log_connections=on", "-c", "log_disconnections=on"]
            EOL

            # Traefik compose file
            cat > docker-compose.traefik.yml << 'EOL'
            version: '3.8'
            secrets:
              backend_app_secret:
                external: true
            networks:
              backend_backend:
                name: backend_backend
                external: true
                driver: overlay
                driver_opts:
                  com.docker.network.driver.mtu: "1400"
              backend_public:
                name: backend_public
                external: true
                driver: overlay
                driver_opts:
                  com.docker.network.driver.mtu: "1400"
            services:
              traefik:
                image: traefik:v2.10
                command:
                  - "--api.insecure=true"
                  - "--providers.docker=true"
                  - "--providers.docker.swarmMode=true"
                  - "--providers.docker.exposedbydefault=false"
                  - "--providers.docker.network=backend_backend"
                  - "--providers.docker.watch=true"
                  - "--providers.docker.endpoint=unix:///var/run/docker.sock"
                  - "--providers.docker.swarmModeRefreshSeconds=15"
                  - "--providers.docker.constraints=Label(`traefik.enable`, `true`)"
                  - "--entrypoints.web.address=:80"
                  - "--log.level=DEBUG"
                  - "--accesslog=true"
                  - "--ping=true"
                  - "--ping.entryPoint=web"
                ports:
                  - target: 80
                    published: 80
                    protocol: tcp
                    mode: host
                  - target: 8080
                    published: 8080
                    protocol: tcp
                    mode: host
                networks:
                  backend_backend:
                    ipv4_address: 10.0.1.6
                  backend_public:
                    ipv4_address: 10.0.2.3
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock:ro
                deploy:
                  placement:
                    constraints:
                      - node.role == manager
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  resources:
                    limits:
                      cpus: '1.0'
                      memory: 1G
                    reservations:
                      cpus: '0.5'
                      memory: 512M
                  update_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                  rollback_config:
                    parallelism: 1
                    delay: 10s
                    order: start-first
                logging:
                  driver: json-file
                  options:
                    max-size: "100m"
                    max-file: "5"
            EOL

            # Backend compose file
            cat > docker-compose.backend.yml << 'EOL'
            version: '3.8'
            secrets:
              backend_app_secret:
                external: true
            networks:
              backend_backend:
                name: backend_backend
                external: true
                driver: overlay
                driver_opts:
                  com.docker.network.driver.mtu: "1400"
              backend_public:
                name: backend_public
                external: true
                driver: overlay
                driver_opts:
                  com.docker.network.driver.mtu: "1400"
            services:
              backend:
                image: ghcr.io/$GITHUB_OWNER_LC/mybudget-backend:$TAG
                networks:
                  backend_backend:
                    ipv4_address: 10.0.1.8
                  backend_public:
                    ipv4_address: 10.0.2.6
                environment:
                  PG_USER: "$PG_USER"
                  PG_PASSWORD: "$PG_PASSWORD"
                  PG_DATABASE: "$PG_DATABASE"
                  DATABASE_URL: "jdbc:postgresql://database:5432/$PG_DATABASE?reconnect=true&connectTimeout=30&socketTimeout=30&tcpKeepAlive=true"
                  JWT_SECRET: "$JWT_SECRET"
                  SPRING_PROFILES_ACTIVE: prod
                  SERVER_PORT: 8082
                  # CORS settings
                  SPRING_SECURITY_CORS_ALLOWED_ORIGINS: "*"
                  SPRING_SECURITY_CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS,PATCH"
                  SPRING_SECURITY_CORS_ALLOWED_HEADERS: "Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers"
                  SPRING_SECURITY_CORS_EXPOSED_HEADERS: "Authorization,Content-Type"
                  SPRING_SECURITY_CORS_ALLOW_CREDENTIALS: "true"
                  SPRING_SECURITY_CORS_MAX_AGE: "3600"
                  # Database connection pool
                  SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000
                  SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 20
                  SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
                  SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 300000
                  SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: 1200000
                  SPRING_DATASOURCE_HIKARI_VALIDATION_TIMEOUT: 5000
                  SPRING_DATASOURCE_HIKARI_LEAK_DETECTION_THRESHOLD: 60000
                  # JVM settings
                  SPRING_JVM_MEMORY_XMS: "1g"
                  SPRING_JVM_MEMORY_XMX: "2g"
                  SPRING_JVM_MEMORY_XX_MAXMETASPACESIZE: "256m"
                  # Tomcat settings
                  SERVER_TOMCAT_MAX_THREADS: "200"
                  SERVER_TOMCAT_MIN_SPARE_THREADS: "20"
                  SERVER_TOMCAT_MAX_CONNECTIONS: "10000"
                  SERVER_TOMCAT_ACCEPT_COUNT: "100"
                  SERVER_TOMCAT_CONNECTION_TIMEOUT: "20000"
                  # Compression settings
                  SERVER_COMPRESSION_ENABLED: "true"
                  SERVER_COMPRESSION_MIME_TYPES: "application/json,application/xml,text/html,text/xml,text/plain,text/css,application/javascript,text/javascript"
                  SERVER_COMPRESSION_MIN_RESPONSE_SIZE: "2048"
                  # Cache settings
                  SPRING_CACHE_TYPE: "caffeine"
                  SPRING_CACHE_CAFFEINE_SPEC: "maximumSize=500,expireAfterWrite=600s"
                ports:
                  - target: 8082
                    published: 8082
                    protocol: tcp
                    mode: host
                secrets:
                  - backend_app_secret
                healthcheck:
                  test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8082/ping || exit 1"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
                deploy:
                  labels:
                    - "traefik.enable=true"
                    - "traefik.docker.network=backend_backend"
                    - "traefik.http.routers.backend.rule=Host(`51.250.65.154`)"
                    - "traefik.http.routers.backend.entrypoints=web"
                    - "traefik.http.services.backend.loadbalancer.server.port=8082"
                    # CORS middleware
                    - "traefik.http.middlewares.cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE,OPTIONS,PATCH"
                    - "traefik.http.middlewares.cors.headers.accessControlAllowOriginList=*"
                    - "traefik.http.middlewares.cors.headers.accessControlAllowHeaders=Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers"
                    - "traefik.http.middlewares.cors.headers.accessControlExposeHeaders=Authorization,Content-Type"
                    - "traefik.http.middlewares.cors.headers.accessControlAllowCredentials=true"
                    - "traefik.http.middlewares.cors.headers.accessControlMaxAge=3600"
                    - "traefik.http.routers.backend.middlewares=cors"
                    - "traefik.http.services.backend.loadbalancer.passHostHeader=true"
                    # Compression middleware
                    - "traefik.http.middlewares.compress.compress=true"
                    - "traefik.http.routers.backend.middlewares=compress@docker,cors"
                    # Rate limiting
                    - "traefik.http.middlewares.ratelimit.ratelimit.average=100"
                    - "traefik.http.middlewares.ratelimit.ratelimit.burst=50"
                    - "traefik.http.routers.backend.middlewares=ratelimit@docker,compress@docker,cors"
                  mode: replicated
                  replicas: 2
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                    window: 120s
                  resources:
                    limits:
                      cpus: '2.0'
                      memory: 2G
                    reservations:
                      cpus: '1.0'
                      memory: 1G
                  update_config:
                    parallelism: 1
                    delay: 15s
                    order: start-first
                    failure_action: rollback
                  rollback_config:
                    parallelism: 1
                    delay: 15s
                    order: start-first
                logging:
                  driver: json-file
                  options:
                    max-size: "100m"
                    max-file: "5"
            EOL

            # Check disk space
            echo "Checking disk space..."
            df -h
            free_space=$(df --output=avail -k / | tail -1)
            if [ "$free_space" -lt 2097152 ]; then
              echo "Warning: Less than 2GB disk space available!"
            fi

            # Verify docker compose config
            echo "Verifying docker-compose.yml..."
            docker compose config

            # Deploy services
            echo "Deploying database service..."
            docker stack deploy -c docker-compose.database.yml backend --with-registry-auth
            sleep 30

            echo "Deploying traefik service..."
            docker stack deploy -c docker-compose.traefik.yml backend --with-registry-auth
            sleep 20

            echo "Deploying backend service..."
            docker stack deploy -c docker-compose.backend.yml backend --with-registry-auth
            sleep 30

            # Verify services
            echo "Verifying services..."
            for service in backend_database backend_traefik backend_backend; do
              if ! docker service ls | grep -q "$service"; then
                echo "Error: Service $service failed to deploy"
                echo "Checking service status..."
                docker service ls
                echo "Checking stack status..."
                docker stack ps backend --no-trunc
                echo "Checking service logs..."
                docker service logs $service --tail 50 || true
                exit 1
              fi
            done

            # Wait for services to be ready
            echo "Waiting for services to be ready..."
            for service in backend_database backend_traefik backend_backend; do
              max_retries=30
              retry_count=0
              while [ $retry_count -lt $max_retries ]; do
                if docker service ps $service --format '{{.CurrentState}}' | grep -q "Running"; then
                  echo "Service $service is running"
                  break
                fi
                retry_count=$((retry_count + 1))
                echo "Waiting for $service... Attempt $retry_count of $max_retries"
                sleep 10
              done

              if [ $retry_count -eq $max_retries ]; then
                echo "Error: Service $service failed to start within the timeout period"
                echo "Checking service status..."
                docker service ls
                echo "Checking stack status..."
                docker stack ps backend --no-trunc
                echo "Checking service logs..."
                docker service logs $service --tail 50
                exit 1
              fi
            done

            # Clean up temporary files
            rm docker-compose.database.yml docker-compose.traefik.yml docker-compose.backend.yml

            # Final status check
            echo "Deployment completed. Checking final status..."
            echo "Stack services:"
            docker stack services backend
            echo "Stack tasks:"
            docker stack ps backend --no-trunc

            # Save logs
            echo "Saving logs..."
            docker service logs backend_backend --tail 50 > backend_backend.log || true
            docker service logs backend_database --tail 50 > backend_database.log || true
            docker service logs backend_traefik --tail 50 > backend_traefik.log || true

            # Display logs
            echo "========== BACKEND LOGS =========="
            cat backend_backend.log || echo "No backend logs available"
            echo "========== DATABASE LOGS =========="
            cat backend_database.log || echo "No database logs available"
            echo "========== TRAEFIK LOGS =========="
            cat backend_traefik.log || echo "No traefik logs available"

      - name: Download logs from server
        if: always()
        run: |
          scp -i ${{ secrets.SERVER_SSH_KEY }} -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/mybudget/backend/*.log .

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: "*.log"