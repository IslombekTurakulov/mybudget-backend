name: Quick Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'latest'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate secrets
        run: |
          # Check required secrets
          if [ -z "${{ secrets.SERVER_HOST }}" ]; then
            echo "Error: Required secret SERVER_HOST is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SERVER_USER }}" ]; then
            echo "Error: Required secret SERVER_USER is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "Error: Required secret SERVER_SSH_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PG_USER }}" ]; then
            echo "Error: Required secret PG_USER is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PG_PASSWORD }}" ]; then
            echo "Error: Required secret PG_PASSWORD is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PG_DATABASE }}" ]; then
            echo "Error: Required secret PG_DATABASE is not set"
            exit 1
          fi
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "Error: Required secret JWT_SECRET is not set"
            exit 1
          fi
          echo "All required secrets are set"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Проверка наличия docker
            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed!"
              exit 1
            fi

            # Проверка наличия docker-compose
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose is not installed!"
              exit 1
            fi

            # Не удаляем volume-ы по умолчанию! Для полного сброса используйте флаг FULL_RESET
            if [ "$FULL_RESET" = "true" ]; then
              echo "FULL_RESET enabled: removing all volumes, including database!"
              docker volume rm backend_pg_data || true
              docker volume rm backend_traefik_pg_data || true
            else
              echo "Skipping volume removal (FULL_RESET not set)"
            fi

            # Create directory if it doesn't exist
            sudo mkdir -p /opt/mybudget/backend
            sudo chown -R $USER:$USER /opt/mybudget/backend
            cd /opt/mybudget/backend
            
            # Check Docker Swarm status
            echo "Checking Docker Swarm status..."
            if ! docker info | grep -q "Swarm: active"; then
              echo "Initializing Docker Swarm..."
              docker swarm init
            fi
            
            # Check node status
            echo "Checking node status..."
            if ! docker node ls | grep -q "Ready"; then
              echo "Error: No nodes are ready"
              exit 1
            fi
            
            # Clean up existing resources
            echo "Cleaning up existing resources..."
            docker stack rm backend || true
            sleep 10
            
            # Force remove all containers
            echo "Force removing all containers..."
            CONTAINERS=$(docker ps -aq)
            if [ -n "$CONTAINERS" ]; then
              docker rm -f $CONTAINERS
            fi
            sleep 5
            
            # Remove all stopped containers
            echo "Removing stopped containers..."
            docker container prune -f
            
            # Remove unused networks
            echo "Removing unused networks..."
            docker network prune -f
            
            # Remove unused volumes
            echo "Removing unused volumes..."
            docker volume prune -f
            
            # Remove unused images
            echo "Removing unused images..."
            docker image prune -f
            
            # Create networks if they don't exist
            echo "Creating networks..."
            docker network create --driver overlay --attachable backend || true
            docker network create --driver overlay --attachable public || true
            sleep 5
            
            # Clean up existing secrets
            echo "Cleaning up existing secrets..."
            docker secret rm backend_pg_user backend_pg_database backend_pg_password backend_app_secret || true
            sleep 5

            # Create secrets directory if it doesn't exist
            mkdir -p secrets
            
            # Create password files
            echo "${{ secrets.PG_USER }}" > secrets/pg_user.txt
            echo "${{ secrets.PG_PASSWORD }}" > secrets/pg_password.txt
            echo "${{ secrets.PG_DATABASE }}" > secrets/pg_database.txt
            echo "${{ secrets.JWT_SECRET }}" > secrets/app_jwt_secret.txt
            
            # Set proper permissions
            chmod 600 secrets/pg_user.txt secrets/pg_password.txt secrets/pg_database.txt secrets/app_jwt_secret.txt

            # Create Docker secrets
            echo "Creating Docker secrets..."
            echo "${{ secrets.PG_USER }}" | docker secret create backend_pg_user -
            echo "${{ secrets.PG_PASSWORD }}" | docker secret create backend_pg_password -
            echo "${{ secrets.PG_DATABASE }}" | docker secret create backend_pg_database -
            echo "${{ secrets.JWT_SECRET }}" | docker secret create backend_app_secret -
            
            # Verify secrets were created
            echo "Verifying secrets..."
            docker secret ls

            # Wait for secrets to be available
            echo "Waiting for secrets to be available..."
            sleep 10

            # Verify each secret exists
            for secret in backend_pg_user backend_pg_database backend_pg_password backend_app_secret; do
              if ! docker secret inspect $secret > /dev/null 2>&1; then
                echo "Error: Secret $secret was not created properly"
                exit 1
              fi
            done

            # Set variables from GitHub Actions context
            GITHUB_OWNER="${{ github.repository_owner }}"
            GITHUB_OWNER_LC=$(echo "$GITHUB_OWNER" | tr '[:upper:]' '[:lower:]')
            TAG="${{ github.event.inputs.image_tag }}"
            
            # Validate and format image tag
            if [ -z "$TAG" ]; then
              TAG="latest"
            fi
            # Remove any invalid characters from tag
            TAG=$(echo "$TAG" | tr -cd '[:alnum:]._-')
            
            echo "GITHUB_OWNER=$GITHUB_OWNER"
            echo "GITHUB_OWNER_LC=$GITHUB_OWNER_LC"
            echo "TAG=$TAG"

            # Export environment variables
            export PG_USER="${{ secrets.PG_USER }}"
            export PG_PASSWORD="${{ secrets.PG_PASSWORD }}"
            export PG_DATABASE="${{ secrets.PG_DATABASE }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export TAG="$TAG"
            export GITHUB_OWNER_LC="$GITHUB_OWNER_LC"

            # Verify environment variables
            echo "Verifying environment variables..."
            if [ -z "$PG_USER" ] || [ -z "$PG_DATABASE" ] || [ -z "$PG_PASSWORD" ] || [ -z "$JWT_SECRET" ] || [ -z "$GITHUB_OWNER_LC" ]; then
              echo "Error: Missing required environment variables"
              echo "PG_USER: ${PG_USER:+set}"
              echo "PG_DATABASE: ${PG_DATABASE:+set}"
              echo "PG_PASSWORD: ${PG_PASSWORD:+set}"
              echo "JWT_SECRET: ${JWT_SECRET:+set}"
              echo "GITHUB_OWNER_LC: ${GITHUB_OWNER_LC:+set}"
              exit 1
            fi

            # Create .env file
            cat > .env << EOL
            PG_USER=$PG_USER
            PG_PASSWORD=$PG_PASSWORD
            PG_DATABASE=$PG_DATABASE
            JWT_SECRET=$JWT_SECRET
            TAG=$TAG
            GITHUB_OWNER_LC=$GITHUB_OWNER_LC
            EOL

            # Verify .env file
            echo "Verifying .env file..."
            cat .env

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Verify GitHub Container Registry login
            echo "Verifying GitHub Container Registry login..."
            if ! docker pull ghcr.io/$GITHUB_OWNER_LC/mybudget-backend:$TAG; then
              echo "Error: Failed to pull image from GitHub Container Registry"
              echo "Checking image existence..."
              docker images | grep "ghcr.io/$GITHUB_OWNER_LC/mybudget-backend:$TAG"
              exit 1
            fi

            # Create temporary compose files for each service
            echo "Creating temporary compose files..."
            
            # Database service compose file
            {
              echo "secrets:"
              echo "  backend_pg_password:"
              echo "    external: true"
              echo "  backend_pg_user:"
              echo "    external: true"
              echo "  backend_pg_database:"
              echo "    external: true"
              echo ""
              echo "networks:"
              echo "  backend:"
              echo "    name: backend"
              echo "    external: true"
              echo "    driver: overlay"
              echo "    driver_opts:"
              echo "      com.docker.network.driver.mtu: \"1400\""
              echo ""
              echo "volumes:"
              echo "  pg_data:"
              echo "    name: backend_pg_data"
              echo ""
              echo "services:"
              echo "  database:"
              echo "    image: postgres:17-alpine"
              echo "    networks:"
              echo "      backend:"
              echo "        ipv4_address: 10.0.1.2"
              echo "    volumes:"
              echo "      - pg_data:/var/lib/postgresql/data"
              echo "    environment:"
              echo "      POSTGRES_USER: \"$PG_USER\""
              echo "      POSTGRES_DB: \"$PG_DATABASE\""
              echo "      POSTGRES_PASSWORD: \"$PG_PASSWORD\""
              echo "      PGDATA: /var/lib/postgresql/data/pgdata"
              echo "    user: postgres"
              echo "    ports:"
              echo "      - target: 5432"
              echo "        published: 5432"
              echo "        protocol: tcp"
              echo "        mode: host"
              echo "    secrets:"
              echo "      - backend_pg_user"
              echo "      - backend_pg_database"
              echo "      - backend_pg_password"
              echo "    healthcheck:"
              echo "      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]"
              echo "      interval: 10s"
              echo "      timeout: 5s"
              echo "      retries: 5"
              echo "      start_period: 30s"
              echo "    deploy:"
              echo "      replicas: 1"
              echo "      restart_policy:"
              echo "        condition: on-failure"
              echo "        max_attempts: 3"
              echo "        window: 120s"
              echo "      resources:"
              echo "        limits:"
              echo "          cpus: '0.5'"
              echo "          memory: 1G"
            } > docker-compose.database.yml

            # Verify the database compose file
            echo "Verifying database compose file..."
            cat docker-compose.database.yml

            # Traefik service compose file
            {
              echo "secrets:"
              echo "  backend_app_secret:"
              echo "    external: true"
              echo ""
              echo "networks:"
              echo "  public:"
              echo "    name: public"
              echo "    external: true"
              echo "    driver: overlay"
              echo "    driver_opts:"
              echo "      com.docker.network.driver.mtu: \"1400\""
              echo ""
              echo "services:"
              echo "  traefik:"
              echo "    image: traefik:v2.10"
              echo "    command:"
              echo "      - \"--api.insecure=true\""
              echo "      - \"--providers.docker=true\""
              echo "      - \"--providers.docker.swarmMode=true\""
              echo "      - \"--providers.docker.exposedbydefault=false\""
              echo "      - \"--entrypoints.web.address=:80\""
              echo "    ports:"
              echo "      - target: 80"
              echo "        published: 80"
              echo "        protocol: tcp"
              echo "        mode: host"
              echo "      - target: 8080"
              echo "        published: 8080"
              echo "        protocol: tcp"
              echo "        mode: host"
              echo "    networks:"
              echo "      public:"
              echo "        ipv4_address: 10.0.2.2"
              echo "    volumes:"
              echo "      - /var/run/docker.sock:/var/run/docker.sock:ro"
              echo "    deploy:"
              echo "      placement:"
              echo "        constraints:"
              echo "          - node.role == manager"
              echo "      restart_policy:"
              echo "        condition: on-failure"
              echo "      resources:"
              echo "        limits:"
              echo "          cpus: '0.5'"
              echo "          memory: 512M"
            } > docker-compose.traefik.yml

            # Backend service compose file
            {
              echo "secrets:"
              echo "  backend_app_secret:"
              echo "    external: true"
              echo ""
              echo "networks:"
              echo "  backend:"
              echo "    name: backend"
              echo "    external: true"
              echo "    driver: overlay"
              echo "    driver_opts:"
              echo "      com.docker.network.driver.mtu: \"1400\""
              echo "  public:"
              echo "    name: public"
              echo "    external: true"
              echo "    driver: overlay"
              echo "    driver_opts:"
              echo "      com.docker.network.driver.mtu: \"1400\""
              echo ""
              echo "services:"
              echo "  backend:"
              echo "    image: ghcr.io/$GITHUB_OWNER_LC/mybudget-backend:$TAG"
              echo "    networks:"
              echo "      backend:"
              echo "        ipv4_address: 10.0.1.3"
              echo "      public:"
              echo "        ipv4_address: 10.0.2.3"
              echo "    environment:"
              echo "      PG_USER: \"$PG_USER\""
              echo "      PG_PASSWORD: \"$PG_PASSWORD\""
              echo "      PG_DATABASE: \"$PG_DATABASE\""
              echo "      DATABASE_URL: \"jdbc:postgresql://database:5432/$PG_DATABASE?reconnect=true&connectTimeout=30\""
              echo "      JWT_SECRET: \"$JWT_SECRET\""
              echo "      SPRING_PROFILES_ACTIVE: prod"
              echo "      SERVER_PORT: 8082"
              echo "      SPRING_SECURITY_CORS_ALLOWED_ORIGINS: \"*\""
              echo "      SPRING_SECURITY_CORS_ALLOWED_METHODS: \"GET,POST,PUT,DELETE,OPTIONS\""
              echo "      SPRING_SECURITY_CORS_ALLOWED_HEADERS: \"*\""
              echo "      SPRING_SECURITY_CORS_ALLOW_CREDENTIALS: \"true\""
              echo "      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000"
              echo "      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 5"
              echo "      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 1"
              echo "      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 300000"
              echo "      SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: 1200000"
              echo "    ports:"
              echo "      - target: 8082"
              echo "        published: 8082"
              echo "        protocol: tcp"
              echo "        mode: host"
              echo "    secrets:"
              echo "      - backend_app_secret"
              echo "    labels:"
              echo "      - \"traefik.enable=true\""
              echo "      - \"traefik.http.routers.backend.rule=Host('51.250.65.154')\""
              echo "      - \"traefik.http.routers.backend.entrypoints=web\""
              echo "      - \"traefik.http.services.backend.loadbalancer.server.port=8082\""
              echo "      - \"traefik.http.middlewares.cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE,OPTIONS\""
              echo "      - \"traefik.http.middlewares.cors.headers.accessControlAllowOriginList=*\""
              echo "      - \"traefik.http.middlewares.cors.headers.accessControlAllowHeaders=*\""
              echo "      - \"traefik.http.middlewares.cors.headers.accessControlAllowCredentials=true\""
              echo "      - \"traefik.http.middlewares.cors.headers.accessControlMaxAge=100\""
              echo "      - \"traefik.http.routers.backend.middlewares=cors\""
              echo "      - \"traefik.http.services.backend.loadbalancer.passHostHeader=true\""
              echo "    healthcheck:"
              echo "      test: [\"CMD-SHELL\", \"curl -f http://localhost:8082/ping || exit 1\"]"
              echo "      interval: 30s"
              echo "      timeout: 5s"
              echo "      retries: 3"
              echo "      start_period: 40s"
              echo "    deploy:"
              echo "      mode: replicated"
              echo "      replicas: 1"
              echo "      restart_policy:"
              echo "        condition: on-failure"
              echo "        max_attempts: 3"
              echo "        window: 120s"
              echo "      resources:"
              echo "        limits:"
              echo "          cpus: '1.0'"
              echo "          memory: 1G"
              echo "      update_config:"
              echo "        parallelism: 1"
              echo "        delay: 15s"
              echo "        order: start-first"
              echo "      rollback_config:"
              echo "        parallelism: 1"
              echo "        delay: 15s"
              echo "        order: start-first"
            } > docker-compose.backend.yml

            # Проверка свободного места на диске
            echo "Checking disk space..."
            df -h
            free_space=$(df --output=avail -k / | tail -1)
            if [ "$free_space" -lt 2097152 ]; then
              echo "Warning: Less than 2GB disk space available!"
            fi

            # Проверка docker compose config
            echo "Verifying docker-compose.yml..."
            docker compose config

            # Deploy services one by one
            echo "Deploying database service..."
            docker stack deploy -c docker-compose.database.yml backend --with-registry-auth
            sleep 30

            # Verify database service is running
            echo "Verifying database service..."
            if ! docker service ls | grep -q "backend_database"; then
              echo "Error: Database service failed to deploy"
              exit 1
            fi

            echo "Deploying traefik service..."
            docker stack deploy -c docker-compose.traefik.yml backend --with-registry-auth
            sleep 20

            # Verify traefik service is running
            echo "Verifying traefik service..."
            if ! docker service ls | grep -q "backend_traefik"; then
              echo "Error: Traefik service failed to deploy"
              exit 1
            fi

            echo "Deploying backend service..."
            docker stack deploy -c docker-compose.backend.yml backend --with-registry-auth
            sleep 30

            # Verify backend service is running
            echo "Verifying backend service..."
            if ! docker service ls | grep -q "backend_backend"; then
              echo "Error: Backend service failed to deploy"
              echo "Checking service status..."
              docker service ls
              echo "Checking stack status..."
              docker stack ps backend --no-trunc
              echo "Checking backend service logs..."
              docker service logs backend_backend --tail 50 || true
              echo "Checking backend service inspect..."
              docker service inspect backend_backend || true
              echo "Checking if image exists..."
              docker images | grep "ghcr.io/$GITHUB_OWNER_LC/mybudget-backend:$TAG"
              echo "Checking network connectivity..."
              docker network inspect backend
              docker network inspect public
              exit 1
            fi

            # Wait for backend service to be ready
            echo "Waiting for backend service to be ready..."
            max_retries=30
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              if docker service ps backend_backend --format '{{.CurrentState}}' | grep -q "Running"; then
                echo "Backend service is running"
                break
              fi
              retry_count=$((retry_count + 1))
              echo "Waiting for backend service... Attempt $retry_count of $max_retries"
              docker service ps backend_backend --no-trunc
              docker service logs backend_backend --tail 10
              sleep 10
            done

            if [ $retry_count -eq $max_retries ]; then
              echo "Error: Backend service failed to start within the timeout period"
              echo "Checking service status..."
              docker service ls
              echo "Checking stack status..."
              docker stack ps backend --no-trunc
              echo "Checking backend service logs..."
              docker service logs backend_backend --tail 50
              echo "Checking backend service inspect..."
              docker service inspect backend_backend
              exit 1
            fi

            # Clean up temporary files
            rm docker-compose.database.yml docker-compose.traefik.yml docker-compose.backend.yml

            # Check service status with more detail
            echo "Checking service status with more detail..."
            docker service ls

            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            max_retries=30
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              if docker service ps backend_database --format '{{.CurrentState}}' | grep -q "Running"; then
                echo "Database service is running"
                break
              fi
              retry_count=$((retry_count + 1))
              echo "Waiting for database service... Attempt $retry_count of $max_retries"
              sleep 10
            done

            if [ $retry_count -eq $max_retries ]; then
              echo "Error: Database service failed to start within the timeout period"
              exit 1
            fi

            # Check service status
            for service in backend_database backend_traefik backend_backend; do
              echo "Service: $service"
              docker service ps $service --no-trunc
              echo "Service logs:"
              docker service logs $service --tail 50
              echo "Service inspect:"
              docker service inspect $service
              echo "----------------------------------------"
            done

            # Check database logs specifically
            echo "Checking database logs..."
            DB_CONTAINER=$(docker ps -q -f name=backend_database)
            if [ -n "$DB_CONTAINER" ]; then
              echo "Database container found: $DB_CONTAINER"
              docker logs $DB_CONTAINER
              echo "Database container inspect:"
              docker inspect $DB_CONTAINER
              echo "Database environment:"
              docker exec $DB_CONTAINER env
              echo "Database process list:"
              docker exec $DB_CONTAINER ps aux
            else
              echo "Database container not found"
            fi

            # Check if secrets are properly mounted
            echo "Checking secrets..."
            docker secret ls
            for secret in backend_pg_user backend_pg_database backend_pg_password backend_app_secret; do
              echo "Secret: $secret"
              docker secret inspect $secret
            done

            # Check network connectivity
            echo "Checking network connectivity..."
            docker network inspect backend
            docker network inspect public
            
            # Check if ports are open
            echo "Checking if ports are open..."
            if command -v netstat &> /dev/null; then
              netstat -tulpn | grep -E '80|443' || true
            else
              echo "netstat not available, skipping port check"
            fi
            
            # Verify health endpoints with more detailed output
            echo "Verifying health endpoints..."
            max_retries=5
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              echo "Attempt $((retry_count + 1)) of $max_retries"
              if curl -v http://51.250.65.154/ping; then
                echo "Health check passed"
                break
              fi
              retry_count=$((retry_count + 1))
              echo "Health check attempt $retry_count failed, retrying..."
              sleep 10
            done
            
            if [ $retry_count -eq $max_retries ]; then
              echo "Error: Health check failed after $max_retries attempts"
              echo "Checking service status one more time..."
              docker service ls
              docker stack ps backend --no-trunc
              exit 1
            fi
            
            # Check resource usage
            echo "Checking resource usage..."
            docker stats --no-stream
            
            # Final status with detailed information
            echo "Deployment completed. Checking final status..."
            echo "Stack services:"
            docker stack services backend 
            echo "Stack tasks:"
            docker stack ps backend --no-trunc
            echo "Service logs:"
            for service in backend_database backend_traefik backend_backend; do
              echo "Logs for $service:"
              docker service logs $service --tail 50 || echo "No logs available for $service"
              echo "----------------------------------------"
            done

            # Сохраняем логи деплоя в файл для артефакта
            docker service logs backend_backend --tail 10 > backend_backend.log || true
            docker service logs backend_database --tail 10 > backend_database.log || true
            docker service logs backend_traefik --tail 10 > backend_traefik.log || true

            # Выводим логи в stdout для GitHub Actions
            echo "========== BACKEND LOGS =========="
            cat backend_backend.log || echo "No backend_backend logs"
            echo "========== DATABASE LOGS =========="
            cat backend_database.log || echo "No backend_database logs"
            echo "========== TRAEFIK LOGS =========="
            cat backend_traefik.log || echo "No backend_traefik logs"

      - name: Download logs from server
        if: always()
        run: |
          scp -i ${{ secrets.SERVER_SSH_KEY }} -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/mybudget/backend/backend_backend.log .
          scp -i ${{ secrets.SERVER_SSH_KEY }} -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/mybudget/backend/backend_database.log .
          scp -i ${{ secrets.SERVER_SSH_KEY }} -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/mybudget/backend/backend_traefik.log .

      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: |
            backend_backend.log
            backend_database.log
            backend_traefik.log