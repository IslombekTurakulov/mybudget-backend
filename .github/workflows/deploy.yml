name: Backend CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to server'
        required: true
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: islombekturakulov/mybudget-backend
  DOCKER_BUILDKIT: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build and Test with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test
          gradle-home-cache-cleanup: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
          gradle-home-cache-cleanup: true

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
            type=gha
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
            type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Create directory if it doesn't exist
            sudo mkdir -p /opt/mybudget/backend
            sudo chown -R $USER:$USER /opt/mybudget/backend
            cd /opt/mybudget/backend
            
            # Check Docker Swarm status
            echo "Checking Docker Swarm status..."
            if ! docker info | grep -q "Swarm: active"; then
              echo "Error: Docker Swarm is not active"
              exit 1
            fi
            
            # Check node status
            echo "Checking node status..."
            if ! docker node ls | grep -q "Ready"; then
              echo "Error: No nodes are ready"
              exit 1
            fi
            
            # Clean up existing resources
            echo "Cleaning up existing resources..."
            
            # Remove existing stack
            docker stack rm backend || true
            sleep 10
            
            # Remove all stopped containers
            echo "Removing stopped containers..."
            docker container prune -f
            
            # Remove unused networks
            echo "Removing unused networks..."
            docker network prune -f
            
            # Remove unused volumes
            echo "Removing unused volumes..."
            docker volume prune -f
            
            # Remove unused images
            echo "Removing unused images..."
            docker image prune -f
            
            # Remove specific networks if they exist
            docker network rm backend_backend backend_public || true
            sleep 5
            
            # Create .env file
            cat > .env << EOL
            PG_USER=${{ secrets.PG_USER }}
            PG_DATABASE=${{ secrets.PG_DATABASE }}
            GITHUB_OWNER=islombekturakulov
            TAG=${{ github.sha }}
            LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            EOL
            
            # Verify environment variables
            echo "Verifying environment variables..."
            if [ -z "${{ secrets.PG_USER }}" ] || [ -z "${{ secrets.PG_DATABASE }}" ] || [ -z "${{ secrets.PG_PASSWORD }}" ] || [ -z "${{ secrets.JWT_SECRET }}" ]; then
              echo "Error: Missing required environment variables"
              exit 1
            fi
            
            # Create secrets directory if it doesn't exist
            mkdir -p secrets
            
            # Create password files
            echo "${{ secrets.PG_PASSWORD }}" > secrets/pg_password.txt
            echo "${{ secrets.JWT_SECRET }}" > secrets/app_jwt_secret.txt
            
            # Set proper permissions
            chmod 600 secrets/pg_password.txt secrets/app_jwt_secret.txt
            
            # Login to GitHub Container Registry with proper authentication
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Verify login and pull the image
            echo "Verifying image access..."
            if ! docker pull ghcr.io/islombekturakulov/mybudget-backend:${{ github.sha }}; then
              echo "Error: Failed to pull image"
              exit 1
            fi
            
            # Copy docker-compose.yml from repository
            cp /opt/mybudget/backend/docker-compose.yml .
            
            # Pull latest images and deploy
            echo "Deploying stack..."
            if ! docker stack deploy -c docker-compose.yml backend --with-registry-auth; then
              echo "Error: Failed to deploy stack"
              exit 1
            fi

            # Wait for services to be ready
            echo "Waiting for services to be ready..."
            sleep 30

            # Check service status
            echo "Checking service status..."
            if ! docker service ls | grep -q "backend_backend"; then
              echo "Error: Backend service not found"
              exit 1
            fi

            # Check if all replicas are running
            echo "Checking replicas..."
            for service in backend_backend backend_database backend_traefik; do
              if ! docker service ps $service --no-trunc | grep -q "Running"; then
                echo "Error: Service $service is not running"
                docker service ps $service --no-trunc
                exit 1
              fi
            done

            # Check network connectivity
            echo "Checking networks..."
            if ! docker network ls | grep -q "backend_backend"; then
              echo "Error: Backend network not found"
              exit 1
            fi

            # Check logs for any immediate issues
            echo "Checking service logs..."
            for service in backend_backend backend_database backend_traefik; do
              echo "=== Logs for $service ==="
              docker service logs --tail 50 $service || true
            done

            # Check if ports are open
            echo "Checking if ports are open..."
            if command -v netstat &> /dev/null; then
              if ! netstat -tulpn | grep -E '80|443' > /dev/null; then
                echo "Warning: Ports 80 or 443 not found in netstat output"
                echo "Current port status:"
                netstat -tulpn
              fi
            else
              echo "Installing net-tools..."
              sudo apt-get update && sudo apt-get install -y net-tools
              if ! netstat -tulpn | grep -E '80|443' > /dev/null; then
                echo "Warning: Ports 80 or 443 not found in netstat output"
                echo "Current port status:"
                netstat -tulpn
              fi
            fi

            # Verify health endpoints
            echo "Verifying health endpoints..."
            max_retries=5
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              if curl -f http://localhost:8080/ping; then
                echo "Health check passed"
                break
              fi
              retry_count=$((retry_count + 1))
              echo "Health check attempt $retry_count failed, retrying..."
              sleep 10
            done

            if [ $retry_count -eq $max_retries ]; then
              echo "Error: Health check failed after $max_retries attempts"
              exit 1
            fi 