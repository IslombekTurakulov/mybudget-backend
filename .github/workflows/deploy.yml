name: Backend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build and Test with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=raw,value=backend-ci,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name != 'pull_request'

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /opt/mybudget/backend
            
            # Copy docker-compose.yml
            cat > docker-compose.yml << 'EOL'
            version: '3.9'

            secrets:
              pg_password:
                file: ./secrets/pg_password.txt
              app_secret:
                file: ./secrets/app_jwt_secret.txt

            networks:
              backend:
                driver: overlay
              public:
                driver: overlay

            volumes:
              pg_data:
              letsencrypt:

            services:
              database:
                image: postgres:17-alpine
                networks:
                  - backend
                volumes:
                  - pg_data:/var/lib/postgresql/data
                environment:
                  POSTGRES_USER: ${PG_USER}
                  POSTGRES_DB: ${PG_DATABASE}
                  POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
                secrets:
                  - pg_password
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                deploy:
                  replicas: 1
                  restart_policy:
                    condition: on-failure
                    max_attempts: 3
                  resources:
                    limits:
                      cpus: '0.5'
                      memory: 512M
                  update_config:
                    parallelism: 1
                    delay: 10s

              backend:
                image: ghcr.io/${GITHUB_OWNER}/mybudget-backend:${TAG}
                networks:
                  - backend
                  - public
                depends_on:
                  database:
                    condition: service_healthy
                environment:
                  DATABASE_URL: jdbc:postgresql://database:5432/${PG_DATABASE}
                  JWT_SECRET: /run/secrets/app_secret
                secrets:
                  - app_secret
                ports:
                  - target: 8080
                    published: 8080
                    protocol: tcp
                    mode: host
                healthcheck:
                  test: ["CMD-SHELL","curl -f http://localhost:8080/health || exit 1"]
                  interval: 30s
                  timeout: 5s
                  retries: 3
                deploy:
                  mode: replicated
                  replicas: 2
                  restart_policy:
                    condition: on-failure
                  resources:
                    limits:
                      cpus: '1.0'
                      memory: 1G
                  update_config:
                    parallelism: 1
                    delay: 15s
                  rollback_config:
                    parallelism: 1
                    delay: 15s
                logging:
                  driver: json-file
                  options:
                    max-size: "10m"
                    max-file: "3"

              traefik:
                image: traefik:v2.11
                networks:
                  - public
                  - backend
                command:
                  - "--providers.docker=true"
                  - "--providers.docker.swarmMode=true"
                  - "--providers.docker.exposedByDefault=false"
                  - "--entrypoints.web.address=:80"
                  - "--entrypoints.websecure.address=:443"
                  - "--certificatesresolvers.leresolver.acme.email=${LETSENCRYPT_EMAIL}"
                  - "--certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json"
                  - "--certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web"
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock:ro
                  - letsencrypt:/letsencrypt
                deploy:
                  mode: global
                  placement:
                    constraints:
                      - node.role == manager
                logging:
                  driver: json-file
                  options:
                    max-size: "5m"
                    max-file: "5"
            EOL

            echo "PG_USER=${{ secrets.PG_USER }}" > .env
            echo "PG_DATABASE=${{ secrets.PG_DATABASE }}" >> .env
            echo "GITHUB_OWNER=${{ github.repository_owner | lower }}" >> .env
            echo "TAG=${{ github.sha }}" >> .env
            echo "LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}" >> .env
            
            # Create secrets directory if it doesn't exist
            mkdir -p secrets
            
            # Create password files
            echo "${{ secrets.PG_PASSWORD }}" > secrets/pg_password.txt
            echo "${{ secrets.JWT_SECRET }}" > secrets/app_jwt_secret.txt
            
            # Set proper permissions
            chmod 600 secrets/pg_password.txt secrets/app_jwt_secret.txt
            
            # Pull latest images and deploy
            docker-compose pull
            docker-compose up -d 